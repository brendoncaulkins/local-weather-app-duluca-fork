{
  "name": "localcast-weather",
  "version": "9.0.0",
  "license": "MIT",
  "config": {
    "imageRepo": "duluca/localcast-weather",
    "imageName": "localcast-weather",
    "imagePort": "8080",
    "internalContainerPort": "3000"
  },
  "scripts": {
    "ng": "ng",
    "style:fix": "import-sort --write \"**/{src,tests,e2e}/**/*.ts\" && prettier --write \"**/{src,tests,e2e}/**/*.{*css,ts}\" && js-beautify \"**/src/**/*.html\"",
    "style": "import-sort -l \"**/{src,tests,e2e}/**/*.ts\" && prettier --check \"**/{src,tests,e2e}/**/*.{*css,ts}\"",
    "start": "ng serve --port 5000",
    "build": "ng build",
    "test": "ng test local-weather-app",
    "test:debug": "npm test -- --source-map",
    "test:coverage": "npm test -- --code-coverage",
    "lint": "tslint --config tslint.json --project . -e \"**/{test,polyfills}.ts\"",
    "lint:fix": "tslint --config tslint.json --fix --project . -e \"**/{test,polyfills}.ts\"",
    "e2e": "ng e2e local-weather-app",
    "build:prod": "ng build --prod",
    "predocker:build": "npm run build:prod && npm test -- --watch=false",
    "docker:build": "cross-conf-env docker image build . -t $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:build": "npm run docker:tag",
    "docker:tag": " cross-conf-env docker image tag $npm_package_config_imageRepo:$npm_package_version $npm_package_config_imageRepo:latest",
    "docker:run": "run-s -c docker:clean docker:runHelper",
    "docker:runHelper": "cross-conf-env docker run -e NODE_ENV=local --name $npm_package_config_imageName -d -p $npm_package_config_imagePort:$npm_package_config_internalContainerPort $npm_package_config_imageRepo",
    "predocker:publish": "echo Attention! Ensure `docker login` is correct.",
    "docker:publish": "cross-conf-env docker image push $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:publish": "cross-conf-env docker image push $npm_package_config_imageRepo:latest",
    "docker:clean": "cross-conf-env docker rm -f $npm_package_config_imageName",
    "predocker:taillogs": "echo Web Server Logs:",
    "docker:taillogs": "cross-conf-env docker logs -f $npm_package_config_imageName",
    "docker:open:win": "echo Trying to launch on Windows && timeout 2 && start http://localhost:%npm_package_config_imagePort%",
    "docker:open:mac": "echo Trying to launch on MacOS && sleep 2 && URL=http://localhost:$npm_package_config_imagePort && open $URL",
    "docker:debugmessage": "echo Docker Debug Completed Successfully! Hit Ctrl+C to terminate log tailing.",
    "predocker:debug": "run-s docker:build docker:run",
    "docker:debug": "run-s -cs docker:open:win docker:open:mac docker:debugmessage docker:taillogs",
    "prenow:publish": "npm run build:prod",
    "now:publish": "now --platform-version 2 --prod dist/local-weather-app",
    "prenow:publish:docker": "npm run build:prod",
    "now:publish:docker": "now --local-config now-v1.json",
    "test:a11y": "pa11y --standard Section508 http://localhost:5000",
    "test:a11y:ci": "pa11y-ci",
    "gcloud:tag": "docker tag duluca/localcast-weather gcr.io/localcast-weather/localcast-weather",
    "gcloud:push": "docker push gcr.io/localcast-weather/localcast-weather",
    "gcloud:build": "gcloud builds submit --tag gcr.io/localcast-weather/localcast-weather --project localcast-weather",
    "gcloud:deploy": "gcloud run deploy --image gcr.io/localcast-weather/localcast-weather --platform managed --project localcast-weather --region us-east1",
    "init:env": "init-dev-env generate-dot-env example.env -f"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "9.1.0",
    "@angular/cdk": "9.2.0",
    "@angular/common": "9.1.0",
    "@angular/compiler": "9.1.0",
    "@angular/core": "9.1.0",
    "@angular/flex-layout": "^9.0.0-beta.29",
    "@angular/forms": "9.1.0",
    "@angular/material": "9.2.0",
    "@angular/platform-browser": "9.1.0",
    "@angular/platform-browser-dynamic": "9.1.0",
    "@angular/platform-server": "9.1.0",
    "@angular/router": "9.1.0",
    "@ngrx/effects": "^9.0.0",
    "@ngrx/store": "^9.0.0",
    "@ngrx/store-devtools": "^9.0.0",
    "rxjs": "^6.5.4",
    "subsink": "^1.0.1",
    "tslib": "^1.11.1",
    "zone.js": "~0.10.3"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.901.0",
    "@angular/cli": "9.1.0",
    "@angular/compiler-cli": "^9.1.0",
    "@angular/language-service": "^9.1.0",
    "@ngrx/schematics": "^9.0.0",
    "@types/jasmine": "^3.5.10",
    "@types/jasminewd2": "~2.0.8",
    "@types/node": "^13.9.5",
    "angular-unit-test-helper": "^9.4.0",
    "codelyzer": "^5.2.2",
    "cross-conf-env": "^1.1.2",
    "dev-norms": "1.7.0",
    "import-sort": "^6.0.0",
    "import-sort-cli": "^6.0.0",
    "import-sort-parser-typescript": "^6.0.0",
    "import-sort-style-module": "^6.0.0",
    "init-dev-env": "^1.0.0",
    "jasmine": "^3.5.0",
    "jasmine-core": "~3.5.0",
    "jasmine-spec-reporter": "~5.0.1",
    "js-beautify": "^1.10.3",
    "karma": "~4.4.1",
    "karma-chrome-launcher": "~3.1.0",
    "karma-cli": "~2.0.0",
    "karma-coverage-istanbul-reporter": "^2.1.1",
    "karma-jasmine": "^3.1.1",
    "karma-jasmine-html-reporter": "^1.5.3",
    "karma-junit-reporter": "^2.0.1",
    "now": "^17.1.1",
    "npm-run-all": "^4.1.5",
    "pa11y": "^5.3.0",
    "pa11y-ci": "^2.3.0",
    "prettier": "^2.0.2",
    "protractor": "~5.4.3",
    "rimraf": "^3.0.2",
    "ts-node": "^8.8.1",
    "tslint": "^6.1.0",
    "tslint-config-prettier": "^1.18.0",
    "tslint-etc": "^1.10.1",
    "tslint-plugin-prettier": "^2.3.0",
    "typescript": "^3.8.3"
  },
  "importSort": {
    ".ts, .tsx": {
      "parser": "typescript",
      "style": "module",
      "options": {}
    }
  }
}
